# -*- coding: utf-8 -*-
"""test.ipynb
​
Automatically generated by Colaboratory.
​
Original file is located at
    https://colab.research.google.com/drive/10wspHSjyOZJrkBh75maLIhT1bs6WDFlJ
"""

from keras.models import Model
from keras.layers import Conv2D, Activation, Input, add, BatchNormalization
from keras import backend as K
from keras.callbacks import CSVLogger
from keras import optimizers
import tensorflow as tf
import numpy as np
import random as rn
from PIL import Image

def predict(id):
    img_in_path = './pics/' + str(id) + '_processed.png'
    img_out_path = './pics/' + str(id) + '_pred.png'
    img_size, _ = Image.open(img_in_path).size
    # img_size-=1
    input_shape = (img_size, img_size, 1)

    weights = './weights/weights.h5'

    def res_unit(inputs, filters, kernel, activ):
        x = inputs
        x = BatchNormalization()(x)
        for f in filters:
            x = Activation(activ)(x)
            x = Conv2D(f, kernel_size=kernel,
                          padding='same')(x)
        return x

    def res_network(units_num, filters, kernel=3, activ = 'relu'):
        inputs = Input(shape=input_shape)
        x = res_unit(inputs, filters, kernel, activ)
        x = add([x, inputs])
        x = Activation(activ)(x)
        for i in range(units_num - 1):
            y = res_unit(x, filters, kernel, activ)
            x = add([x, y])
            x = Activation(activ)(x)
        outputs = x

        model = Model(inputs=inputs, outputs=outputs)
        return model



    model = res_network(10, [12,10,8,6,1])
    model.load_weights(weights)
    # print(np.array(Image.open(img_in_path)).size)
    img_in = np.array(Image.open(img_in_path)).reshape(1,img_size,img_size,1)
    res = model.predict(img_in)[0]
    img_out = np.array(Image.new('L', (img_size,img_size), (255)))
    for i in range(img_size):
        for j in range(img_size):
            img_out[i][j] = min(res[i][j][0], 255)
    Image.fromarray(img_out, 'L').save(img_out_path)
    tf.reset_default_graph()
    tf.keras.backend.clear_session()

if __name__ == '__main__':
    import sys
    predict(sys.argv[1])
